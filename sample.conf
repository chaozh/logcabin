# This is a sample configuration file for LogCabin.



### Misc ###

# The set of servers in the cluster. Each server will attempt to bind to each
# of these addresses in turn, until it succeeds on any. This is convenient if
# you want to share the configuration file for all of your servers; they'll
# each figure out what they are able to bind to.
#
# servers = 192.168.2.1:61023;192.168.2.2:61023;192.168.2.3:61023

# The maximum number of threads to launch for each RPC service (default: 16).
#
# maxThreads = 16

# Each servers will dump a bunch of information about itself periodically in
# its debug log at the NOTICE level. This is the number of milliseconds between
# state dumps. A value of 0 means to never print these messages to the log.
# Note: you can also request a server to dump its information by sending it the
# signal SIGUSR1.
#
# statsDumpIntervalMilliseconds = 60000

# The client side of a TCP connection will actively send out pings when it has
# an outstanding RPC but suspects the server of being down. It will send out a
# ping after tcpHeartbeatTimeoutMilliseconds / 2, and if it doesn't get a
# response after another tcpHeartbeatTimeoutMilliseconds / 2, it will close the
# session. This applies to server-to-server connections (which this config file
# will affect). It may also be set for the client library in the map of options
# passed to the Cluster constructor.
#
# tcpHeartbeatTimeoutMilliseconds = 200



### Raft ###

# The number of milliseconds that a follower waits without hearing from a
# current leader or granting its vote, before it becomes a candidate and starts
# a new election. Until we understand how Raft would behave, it's strongly
# recommended that you use the same election timeout setting on every server.
#
# electionTimeoutMilliseconds = 150

# A leader sends RPCs at least this often, even if there is no data to
# send. Default and sane value: electionTimeoutMilliseconds / 2.
#
# heartbeatPeriodMilliseconds = 75

# A candidate or leader waits this long after an RPC fails before sending
# another one, so as to not overwhelm the network with retries.
# Default value: electionTimeoutMilliseconds / 2.
#
# rpcFailureBackoffMilliseconds = 75



### Storage Module ###

# You need to specify the storage module to use.
# Different storage modules require different additional options.
# Default: SimpleFile

# The Memory storage module will store all data in memory only. It will
# probably eat your data.
#
# storageModule = Memory

# The SimpleFile storage module stores each log entry in a separate file. It's
# fairly easy to see what the server is storing, but it's not efficient.
#
# storageModule = SimpleFile
#
# A filesystem path for this storage module to operate in. Its parent directory
# must exist.
#
# storagePath = storage

# The Segmented storage module writes log entries sequentially into large files
# called segments, typically 8 MB in size. This should make efficient use the
# disk while still working atop the filesystem. The Segmented-Text module is
# similar but uses a slow, human-readable record format.
#
# storageModule = Segmented
#
# A filesystem path for this storage module to operate in. Its parent directory
# must exist.
#
# storagePath = storage
#
# The checksum algorithm to use for records on disk. Most of the crypto++
# algorithms are available.
#
# storageChecksum = CRC32
#
# The number of segment files that the Segmented storage module will try to open
# ahead of time. Once Log::append() fills up the head of the log, it will grab
# one of these files to use for the next entry. If there are no files
# available, the append will be blocked temporarily, and you'll see a WARNING
# in the server's debug logs.
#
# storageOpenSegments = 3
#
# The maximum size for each segment that this storage module will create. Note
# that the server will happily read in segments of any size at boot time; this
# option only applies to newly written segments. If an entry is appended to the
# log that is larger than this value, it will be written to its own segment,
# regardless of the size. Default: 8 MB.
#
# storageSegmentBytes = 8388608
#
# If true and compiled with BUILDTYPE=DEBUG mode, runs through some additional
# checks inside the storage module. These may be costly, especially if you have
# a large number of entries.
#
# storageDebug = no


### Snapshotting ###
#
# Each server takes a snapshot once the following conditions are met:
#   log size > snapshotMinLogSize, AND
#   log size > snapshotRatio * last snapshot size
#
# Size in bytes of smallest log to snapshot.
# snapshotMinLogSize = 1024
#
# Maximum log size as multiple of last snapshot size until server should
# snapshot.
# snapshotRatio = 10
